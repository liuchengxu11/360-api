{
  "uid" : "61b83ead358486fa",
  "name" : "发送语音",
  "fullName" : "test.test_api#test_main",
  "historyId" : "e09235db78f8a450e7591086d32c3420",
  "time" : {
    "start" : 1616132012108,
    "stop" : 1616132012236,
    "duration" : 128
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: 断言失败 -|- 实际结果:文件不存在 || 预期结果: 成功",
  "statusTrace" : "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '400004', 'errmsg': '文件不存在'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools/data_process.py:118: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['case_103', '消息中心应用消息', '发送消息', '发送语音', '/v1/message/send', '', ...]\n\n    @pytest.mark.flaky(reruns=0, reruns_delay=1)\n    def test_main(cases):#cases, get_db\n        # 此处的cases入参来自与 conftest.py  文件中 cases函数，与直接使用 @pytest.mark.parametrize\n        # 有着差不多的效果\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 执行sql\n        # DataProcess.handle_sql(sql, get_db)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest/test_api.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '400004', 'errmsg': '文件不存在'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n>               raise AssertionError(f'断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 断言失败 -|- 实际结果:文件不存在 || 预期结果: 成功\n\ntools/data_process.py:120: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "cases",
    "time" : {
      "start" : 1616132012108,
      "stop" : 1616132012108,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1616131957054,
      "stop" : 1616131957103,
      "duration" : 49
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: 断言失败 -|- 实际结果:文件不存在 || 预期结果: 成功",
    "statusTrace" : "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '400004', 'errmsg': '文件不存在'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools/data_process.py:118: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['case_103', '消息中心应用消息', '发送消息', '发送语音', '/v1/message/send', '', ...]\n\n    @pytest.mark.flaky(reruns=0, reruns_delay=1)\n    def test_main(cases):#cases, get_db\n        # 此处的cases入参来自与 conftest.py  文件中 cases函数，与直接使用 @pytest.mark.parametrize\n        # 有着差不多的效果\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 执行sql\n        # DataProcess.handle_sql(sql, get_db)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest/test_api.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '400004', 'errmsg': '文件不存在'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n>               raise AssertionError(f'断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 断言失败 -|- 实际结果:文件不存在 || 预期结果: 成功\n\ntools/data_process.py:120: AssertionError",
    "steps" : [ {
      "name" : "请求地址",
      "time" : {
        "start" : 1616132012108,
        "stop" : 1616132012109,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "3e1109ee03c56398",
        "name" : "请求地址",
        "source" : "3e1109ee03c56398.txt",
        "type" : "text/plain",
        "size" : 43
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "请求头",
      "time" : {
        "start" : 1616132012109,
        "stop" : 1616132012109,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "3c397f479e2ed400",
        "name" : "请求头",
        "source" : "3c397f479e2ed400.txt",
        "type" : "text/plain",
        "size" : 220
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "请求参数",
      "time" : {
        "start" : 1616132012112,
        "stop" : 1616132012113,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "715d9b5450392c3f",
        "name" : "请求参数",
        "source" : "715d9b5450392c3f.txt",
        "type" : "text/plain",
        "size" : 346
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "上传文件",
      "time" : {
        "start" : 1616132012113,
        "stop" : 1616132012113,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "d56a5769ed7388c0",
        "name" : "上传文件",
        "source" : "d56a5769ed7388c0.txt",
        "type" : "text/plain",
        "size" : 2
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "响应耗时(s)",
      "time" : {
        "start" : 1616132012227,
        "stop" : 1616132012228,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "4b7dca26d7e90f90",
        "name" : "响应耗时(s)",
        "source" : "4b7dca26d7e90f90.txt",
        "type" : "text/plain",
        "size" : 8
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "响应内容",
      "time" : {
        "start" : 1616132012228,
        "stop" : 1616132012228,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "666b95ec2e6f1fa8",
        "name" : "响应内容",
        "source" : "666b95ec2e6f1fa8.txt",
        "type" : "text/plain",
        "size" : 60
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "存储实际响应",
      "time" : {
        "start" : 1616132012228,
        "stop" : 1616132012235,
        "duration" : 7
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "a39af56202e781dd",
        "name" : "存储实际响应",
        "source" : "a39af56202e781dd.txt",
        "type" : "text/plain",
        "size" : 101874
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "第1个断言",
      "time" : {
        "start" : 1616132012236,
        "stop" : 1616132012236,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "cc331bc4931cd16a",
        "name" : "第1个断言",
        "source" : "cc331bc4931cd16a.txt",
        "type" : "text/plain",
        "size" : 52
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 8,
    "attachmentsCount" : 8,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "tag",
    "value" : "flaky(reruns=0, reruns_delay=1)"
  }, {
    "name" : "parentSuite",
    "value" : "test"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "host",
    "value" : "liuchengxudeMacBook-Pro.local"
  }, {
    "name" : "thread",
    "value" : "2415-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "cases",
    "value" : "['case_103', '消息中心应用消息', '发送消息', '发送语音', '/v1/message/send', '', 'post', 'json', '', '{\\n \"appid\": \"&$.test_023..datas[8].app_id&\",\\n \"access_token\": \"&$.case_100.access_token&\",\\n \"to_users\": [\"&$.test_010..datas[0].uid&\", \"&$.test_011..datas[0].uid&\", \"&$.test_004..datas[0].uid&\", \"&$.test_005..datas[0].uid&\"],\\n \"type\": \"audio\",\\n \"message\": {\\n  \"media_id\":\"&$.case_023.media_id&\",\\n  \"duration\": 10\\n },\\n \"msg_status\": \"1\"\\n}', '', '', '{\"$.errmsg\":\"成功\"}']"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "flaky(reruns=0, reruns_delay=1)" ]
  },
  "source" : "61b83ead358486fa.json",
  "parameterValues" : [ "['case_103', '消息中心应用消息', '发送消息', '发送语音', '/v1/message/send', '', 'post', 'json', '', '{\\n \"appid\": \"&$.test_023..datas[8].app_id&\",\\n \"access_token\": \"&$.case_100.access_token&\",\\n \"to_users\": [\"&$.test_010..datas[0].uid&\", \"&$.test_011..datas[0].uid&\", \"&$.test_004..datas[0].uid&\", \"&$.test_005..datas[0].uid&\"],\\n \"type\": \"audio\",\\n \"message\": {\\n  \"media_id\":\"&$.case_023.media_id&\",\\n  \"duration\": 10\\n },\\n \"msg_status\": \"1\"\\n}', '', '', '{\"$.errmsg\":\"成功\"}']" ]
}