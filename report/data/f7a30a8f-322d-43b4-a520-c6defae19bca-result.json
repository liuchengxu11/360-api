{"name": "创建群成员-成员1（群主）", "status": "failed", "statusDetails": {"message": "AssertionError: 断言失败 -|- 实际结果:用户帐号已存在 || 预期结果: 成功", "trace": "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '220001', 'errmsg': '用户帐号已存在'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools/data_process.py:118: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['case_051', '测试数据准备', '群管理相关', '创建群成员-成员1（群主）', '/v1/user/create?access_token=&$.case_001.access_token&', '', ...]\n\n    @pytest.mark.flaky(reruns=0, reruns_delay=1)\n    def test_main(cases):#cases, get_db\n        # 此处的cases入参来自与 conftest.py  文件中 cases函数，与直接使用 @pytest.mark.parametrize\n        # 有着差不多的效果\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 执行sql\n        # DataProcess.handle_sql(sql, get_db)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest/test_api.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '220001', 'errmsg': '用户帐号已存在'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n>               raise AssertionError(f'断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 断言失败 -|- 实际结果:用户帐号已存在 || 预期结果: 成功\n\ntools/data_process.py:120: AssertionError"}, "steps": [{"name": "请求地址", "status": "passed", "attachments": [{"name": "请求地址", "source": "f4c40715-6cb3-45f0-9df8-ce5645606a46-attachment.txt", "type": "text/plain"}], "start": 1616038001923, "stop": 1616038001923}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "371e78be-1d3f-4170-93e7-49037f6f3622-attachment.txt", "type": "text/plain"}], "start": 1616038001923, "stop": 1616038001924}, {"name": "请求参数", "status": "passed", "attachments": [{"name": "请求参数", "source": "b35e0dd4-d574-4aed-a7a4-b05b8580afa6-attachment.txt", "type": "text/plain"}], "start": 1616038001924, "stop": 1616038001924}, {"name": "上传文件", "status": "passed", "attachments": [{"name": "上传文件", "source": "f8761614-ed18-42e8-967d-2b63fd3e6a6b-attachment.txt", "type": "text/plain"}], "start": 1616038001924, "stop": 1616038001924}, {"name": "响应耗时(s)", "status": "passed", "attachments": [{"name": "响应耗时(s)", "source": "45ddab38-d0d0-4ddf-8c5d-101bd1303f10-attachment.txt", "type": "text/plain"}], "start": 1616038002272, "stop": 1616038002273}, {"name": "响应内容", "status": "passed", "attachments": [{"name": "响应内容", "source": "4c2591c6-a2ad-41ac-a036-edbad40d173d-attachment.txt", "type": "text/plain"}], "start": 1616038002273, "stop": 1616038002273}, {"name": "存储实际响应", "status": "passed", "attachments": [{"name": "存储实际响应", "source": "e3e396cc-cb2b-4676-b8bf-a6646e93cbec-attachment.txt", "type": "text/plain"}], "start": 1616038002273, "stop": 1616038002275}, {"name": "第1个断言", "status": "passed", "attachments": [{"name": "第1个断言", "source": "f4c6ead5-8999-45e9-8bd7-f768b86a4da9-attachment.txt", "type": "text/plain"}], "start": 1616038002275, "stop": 1616038002275}], "parameters": [{"name": "cases", "value": "['case_051', '测试数据准备', '群管理相关', '创建群成员-成员1（群主）', '/v1/user/create?access_token=&$.case_001.access_token&', '', 'post', 'json', '', '{\\n    \"name\": \"我是群主呀\",\\n    \"department\": [\\n        {\\n            \"did\": \"&$.case_050.did&\",\\n            \"order\": \"2\",\\n            \"posName\": \"ceo\"\\n        }\\n    ],\\n    \"gender\": \"1\",\\n    \"sign\": \"刘哥好帅我要嫁给他\",\\n    \"enName\": \"lucky\",\\n    \"tel\": \"0215553222\",\\n    \"mobile\": \"15000000000\"\\n}', '', '', '{\"$.errmsg\":\"成功\"}']"}], "start": 1616038001923, "stop": 1616038002275, "uuid": "eb0a0d91-c5e1-4b98-8c7c-e84b917386df", "historyId": "d90cba7385e9471943c57cd1332d0ac5", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "tag", "value": "flaky(reruns=0, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "liuchengxudeMacBook-Pro.local"}, {"name": "thread", "value": "3455-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}