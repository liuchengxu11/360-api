{"name": "创建卡片-公众号4-设置卡片看板入口", "status": "failed", "statusDetails": {"message": "AssertionError: 断言失败 -|- 实际结果:非法 token || 预期结果: 成功", "trace": "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'err_code': '10000007', 'err_msg': '非法 token', 'time_cost': '', 'timestamp': '1611107788', ...}\nexpect_str = '{\"$.err_msg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools/data_process.py:118: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['test_026', '公众号模块', '创建公众号', '创建卡片-公众号4-设置卡片看板入口', '/corpmanage/workportal/create', '', ...]\n\n    @pytest.mark.flaky(reruns=0, reruns_delay=1)\n    def test_main(cases):#cases, get_db\n        # 此处的cases入参来自与 conftest.py  文件中 cases函数，与直接使用 @pytest.mark.parametrize\n        # 有着差不多的效果\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 执行sql\n        # DataProcess.handle_sql(sql, get_db)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest/test_api.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'err_code': '10000007', 'err_msg': '非法 token', 'time_cost': '', 'timestamp': '1611107788', ...}\nexpect_str = '{\"$.err_msg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n>               raise AssertionError(f'断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 断言失败 -|- 实际结果:非法 token || 预期结果: 成功\n\ntools/data_process.py:120: AssertionError"}, "steps": [{"name": "请求地址", "status": "passed", "attachments": [{"name": "请求地址", "source": "f372b4f8-0494-48fd-bbe6-5868d0529b83-attachment.txt", "type": "text/plain"}], "start": 1611107788493, "stop": 1611107788494}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "c95d81bc-2f63-47d6-9c14-20e76f628e74-attachment.txt", "type": "text/plain"}], "start": 1611107788494, "stop": 1611107788495}, {"name": "请求参数", "status": "passed", "attachments": [{"name": "请求参数", "source": "2095d865-b875-4a97-b366-e8b657e0d9b1-attachment.txt", "type": "text/plain"}], "start": 1611107788497, "stop": 1611107788498}, {"name": "上传文件", "status": "passed", "attachments": [{"name": "上传文件", "source": "f96f9a67-b1c7-4d47-9b1e-c9b55818c14e-attachment.txt", "type": "text/plain"}], "start": 1611107788498, "stop": 1611107788499}, {"name": "响应耗时(s)", "status": "passed", "attachments": [{"name": "响应耗时(s)", "source": "6541b191-372b-4419-8b9b-ae612cc59977-attachment.txt", "type": "text/plain"}], "start": 1611107788575, "stop": 1611107788576}, {"name": "响应内容", "status": "passed", "attachments": [{"name": "响应内容", "source": "47971d3c-5fa9-4500-85c8-f9c4d44d8d05-attachment.txt", "type": "text/plain"}], "start": 1611107788577, "stop": 1611107788577}, {"name": "存储实际响应", "status": "passed", "attachments": [{"name": "存储实际响应", "source": "2a6c708f-8c53-4374-84eb-6cdc6061c6b0-attachment.txt", "type": "text/plain"}], "start": 1611107788578, "stop": 1611107788579}, {"name": "第1个断言", "status": "passed", "attachments": [{"name": "第1个断言", "source": "3026c26d-0b1e-4051-a1ae-a68ee53eb23e-attachment.txt", "type": "text/plain"}], "start": 1611107788580, "stop": 1611107788581}], "parameters": [{"name": "cases", "value": "['test_026', '公众号模块', '创建公众号', '创建卡片-公众号4-设置卡片看板入口', '/corpmanage/workportal/create', '', 'post', 'json', '', '{\\n \"trans_id\": \"&$.test_002.trans_id&\",\\n    \"access_token\": \"&$.test_003..datas[0].access_token&\",\\n    \"cid\": \"&$.test_002..datas[0].cid&\",\\n \"client_ver\": \"3.1.0\",\\n \"dev_type\": \"7\",\\n \"operator_uid\": \"&$.test_002..datas[0].admin_uid&\",\\n \"app_id\": \"&$.test_022..datas[7].app_id&\",\\n \"icon_fid\": \"\",\\n \"name\": \"应用4-生成看板入口\",\\n \"tpl\": \"1\",\\n \"page_size\": \"7\",\\n \"mobile_page_size\": \"5\",\\n \"short\": \"1\",\\n \"redirect\": \"0\",\\n \"short_name\": \"入口\",\\n \"short_desc\": \"快捷入口简介\"\\n}', '', '', '{\"$.err_msg\":\"成功\"}']"}], "start": 1611107788493, "stop": 1611107788581, "uuid": "161e110d-2508-47d9-8c51-7d12545ae9f2", "historyId": "d749293f2e1f9fd928f74895ab86c30e", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "feature", "value": "公众号模块"}, {"name": "story", "value": "创建公众号"}, {"name": "tag", "value": "flaky(reruns=0, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "liuchengxudeMacBook-Pro.local"}, {"name": "thread", "value": "2004-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}