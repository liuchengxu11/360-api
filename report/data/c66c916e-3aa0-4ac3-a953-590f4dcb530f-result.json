{"name": "创建公众号-预添加选择部门", "status": "failed", "statusDetails": {"message": "AssertionError: 断言失败 -|- 实际结果:非法 token || 预期结果: 成功", "trace": "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'err_code': '10000007', 'err_msg': '非法 token', 'time_cost': '', 'timestamp': '1611107787', ...}\nexpect_str = '{\"$.err_msg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools/data_process.py:118: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['test_014', '公众号模块', '创建公众号', '创建公众号-预添加选择部门', '/corpmanage/app/extend/create', '', ...]\n\n    @pytest.mark.flaky(reruns=0, reruns_delay=1)\n    def test_main(cases):#cases, get_db\n        # 此处的cases入参来自与 conftest.py  文件中 cases函数，与直接使用 @pytest.mark.parametrize\n        # 有着差不多的效果\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 执行sql\n        # DataProcess.handle_sql(sql, get_db)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest/test_api.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'err_code': '10000007', 'err_msg': '非法 token', 'time_cost': '', 'timestamp': '1611107787', ...}\nexpect_str = '{\"$.err_msg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n>               raise AssertionError(f'断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 断言失败 -|- 实际结果:非法 token || 预期结果: 成功\n\ntools/data_process.py:120: AssertionError"}, "steps": [{"name": "请求地址", "status": "passed", "attachments": [{"name": "请求地址", "source": "34b77f98-4ef9-4c71-85c5-26c2d4a90917-attachment.txt", "type": "text/plain"}], "start": 1611107787192, "stop": 1611107787193}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "2a42d526-6e21-440e-b3a1-d253ebce285a-attachment.txt", "type": "text/plain"}], "start": 1611107787193, "stop": 1611107787195}, {"name": "请求参数", "status": "passed", "attachments": [{"name": "请求参数", "source": "8435d1e8-dd5d-425b-8415-a4e3ef0b4ca1-attachment.txt", "type": "text/plain"}], "start": 1611107787197, "stop": 1611107787198}, {"name": "上传文件", "status": "passed", "attachments": [{"name": "上传文件", "source": "9624887e-8574-4c12-bc37-04109ad207e9-attachment.txt", "type": "text/plain"}], "start": 1611107787198, "stop": 1611107787198}, {"name": "响应耗时(s)", "status": "passed", "attachments": [{"name": "响应耗时(s)", "source": "c30b0ba7-568e-4dec-814b-7a8ea9cb8414-attachment.txt", "type": "text/plain"}], "start": 1611107787276, "stop": 1611107787277}, {"name": "响应内容", "status": "passed", "attachments": [{"name": "响应内容", "source": "7033fb54-763e-4f81-8d7b-8dedda0758bd-attachment.txt", "type": "text/plain"}], "start": 1611107787277, "stop": 1611107787277}, {"name": "存储实际响应", "status": "passed", "attachments": [{"name": "存储实际响应", "source": "162010df-798b-4a33-9d3c-2144c9d2d34d-attachment.txt", "type": "text/plain"}], "start": 1611107787278, "stop": 1611107787280}, {"name": "第1个断言", "status": "passed", "attachments": [{"name": "第1个断言", "source": "3908b8b0-15a6-4c41-88ae-dc5fd34b46f2-attachment.txt", "type": "text/plain"}], "start": 1611107787281, "stop": 1611107787283}], "parameters": [{"name": "cases", "value": "['test_014', '公众号模块', '创建公众号', '创建公众号-预添加选择部门', '/corpmanage/app/extend/create', '', 'post', 'json', '', '{\\n    \"trans_id\":\"&$.test_002.trans_id&\",\\n    \"access_token\":\"&$.test_003..datas[0].access_token&\",\\n    \"cid\":\"&$.test_002..datas[0].cid&\",\\n    \"client_ver\":\"3.1.0\",\\n    \"dev_type\":\"7\",\\n    \"operator_uid\":\"&$.test_002..datas[0].admin_uid&\",\\n    \"name\":\"应用1-预添加选择部门\",\\n    \"desc\":\"应用介绍\",\\n    \"visible_scopes\":{\\n        \"0\":{\\n            \"did\":\"0\",\\n            \"name\":\"pytest\"\\n        }\\n    },\\n    \"preadd_scopes\":{\\n        \"0\":{\\n            \"did\":\"0\",\\n            \"name\":\"pytest\"\\n        }\\n    },\\n    \"extend_type\":\"1\",\\n    \"extend_params\":{\\n        \"receive_scopes\":{\\n\\n        },\\n        \"publish_scopes\":{\\n\\n        },\\n        \"receive_type\":\"1\",\\n        \"push_message_status\":\"0\",\\n        \"new_windows_status\":\"0\"\\n    }\\n}', '', '{\\n    \"trans_id\": \"5A46D8A683FD85B723E379D38D0FA79B\",\\n    \"err_code\": \"0\",\\n    \"err_msg\": \"成功\",\\n    \"timestamp\": \"1610534640\",\\n    \"time_cost\": \"0.514\"\\n}', '{\"$.err_msg\":\"成功\"}']"}], "start": 1611107787192, "stop": 1611107787283, "uuid": "7bfafe83-5d57-4f39-a748-e94fd980381f", "historyId": "2a3dfa6b36ee5ab01504c51319b8492e", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "feature", "value": "公众号模块"}, {"name": "story", "value": "创建公众号"}, {"name": "tag", "value": "flaky(reruns=0, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "liuchengxudeMacBook-Pro.local"}, {"name": "thread", "value": "2004-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}