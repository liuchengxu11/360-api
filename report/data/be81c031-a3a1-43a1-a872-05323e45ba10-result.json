{"name": "创建一个普通群2嵌套普通群1", "status": "failed", "statusDetails": {"message": "AssertionError: 断言失败 -|- 实际结果:非法 token || 预期结果: 成功", "trace": "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'err_code': '10000007', 'err_msg': '非法 token', 'time_cost': '', 'timestamp': '1611107786', ...}\nexpect_str = '{\"$.err_msg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools/data_process.py:118: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['test_009', '管理后台', '账号管理', '创建一个普通群2嵌套普通群1', '/corpmanage/createdept', '', ...]\n\n    @pytest.mark.flaky(reruns=0, reruns_delay=1)\n    def test_main(cases):#cases, get_db\n        # 此处的cases入参来自与 conftest.py  文件中 cases函数，与直接使用 @pytest.mark.parametrize\n        # 有着差不多的效果\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 执行sql\n        # DataProcess.handle_sql(sql, get_db)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest/test_api.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'err_code': '10000007', 'err_msg': '非法 token', 'time_cost': '', 'timestamp': '1611107786', ...}\nexpect_str = '{\"$.err_msg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n>               raise AssertionError(f'断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 断言失败 -|- 实际结果:非法 token || 预期结果: 成功\n\ntools/data_process.py:120: AssertionError"}, "steps": [{"name": "请求地址", "status": "passed", "attachments": [{"name": "请求地址", "source": "72d654a0-b7a0-4ef8-bbb2-3374ffa7807e-attachment.txt", "type": "text/plain"}], "start": 1611107786584, "stop": 1611107786585}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "6a78d41c-c0ff-4ccb-b3b9-c50711e7a20e-attachment.txt", "type": "text/plain"}], "start": 1611107786585, "stop": 1611107786585}, {"name": "请求参数", "status": "passed", "attachments": [{"name": "请求参数", "source": "15073533-8be9-4709-98e0-b6335b493173-attachment.txt", "type": "text/plain"}], "start": 1611107786586, "stop": 1611107786587}, {"name": "上传文件", "status": "passed", "attachments": [{"name": "上传文件", "source": "45cc12c8-dcdc-4c2a-9993-efb1de434c3d-attachment.txt", "type": "text/plain"}], "start": 1611107786587, "stop": 1611107786587}, {"name": "响应耗时(s)", "status": "passed", "attachments": [{"name": "响应耗时(s)", "source": "578892f9-0fd9-4be6-8b0b-25697eac139a-attachment.txt", "type": "text/plain"}], "start": 1611107786669, "stop": 1611107786669}, {"name": "响应内容", "status": "passed", "attachments": [{"name": "响应内容", "source": "b78eda4f-8ac3-4e8b-9882-edb57b694fa0-attachment.txt", "type": "text/plain"}], "start": 1611107786670, "stop": 1611107786670}, {"name": "存储实际响应", "status": "passed", "attachments": [{"name": "存储实际响应", "source": "5c93ac16-bc12-4c9d-883e-e42c6ebdf512-attachment.txt", "type": "text/plain"}], "start": 1611107786670, "stop": 1611107786671}, {"name": "第1个断言", "status": "passed", "attachments": [{"name": "第1个断言", "source": "288b3d27-6623-49ca-93d0-a2aa72f5dc44-attachment.txt", "type": "text/plain"}], "start": 1611107786671, "stop": 1611107786672}], "parameters": [{"name": "cases", "value": "['test_009', '管理后台', '账号管理', '创建一个普通群2嵌套普通群1', '/corpmanage/createdept', '', 'post', 'json', '', '{\\n \"trans_id\":\"&$.test_002.trans_id&\",\\n    \"access_token\":\"&$.test_003..datas[0].access_token&\",\\n    \"cid\":\"&$.test_002..datas[0].cid&\",\\n \"client_ver\": \"3.1.0\",\\n \"dev_type\": \"7\",\\n \"operator_uid\":\"&$.test_002..datas[0].admin_uid&\",\\n \"pid\": \"&$.test_006..datas[0].did&\",\\n \"name\": \"pytest-dept2\",\\n \"dept_group\": \"0\",\\n \"recursive_add_member\": \"0\"\\n}', '', '', '{\"$.err_msg\":\"成功\"}']"}], "start": 1611107786584, "stop": 1611107786672, "uuid": "c0fb77b3-304e-4760-afa1-4377fa70d2e6", "historyId": "5a1a59aa4470006c7c58a5ba625a4478", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "feature", "value": "管理后台"}, {"name": "story", "value": "账号管理"}, {"name": "tag", "value": "flaky(reruns=0, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "liuchengxudeMacBook-Pro.local"}, {"name": "thread", "value": "2004-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}