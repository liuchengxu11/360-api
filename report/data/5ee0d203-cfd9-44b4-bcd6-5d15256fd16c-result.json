{"name": "上传媒体文件-pdf", "status": "failed", "statusDetails": {"message": "AssertionError: 断言失败 -|- 实际结果:文件大小超出限制 || 预期结果: 成功", "trace": "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '400002', 'errmsg': '文件大小超出限制'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools/data_process.py:118: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['case_027', '多媒体文件', '多媒体文件', '上传媒体文件-pdf', '/v1/media/upload?access_token=&$.case_001.access_token&', '', ...]\n\n    @pytest.mark.flaky(reruns=0, reruns_delay=1)\n    def test_main(cases):#cases, get_db\n        # 此处的cases入参来自与 conftest.py  文件中 cases函数，与直接使用 @pytest.mark.parametrize\n        # 有着差不多的效果\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 执行sql\n        # DataProcess.handle_sql(sql, get_db)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest/test_api.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '400002', 'errmsg': '文件大小超出限制'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n>               raise AssertionError(f'断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 断言失败 -|- 实际结果:文件大小超出限制 || 预期结果: 成功\n\ntools/data_process.py:120: AssertionError"}, "steps": [{"name": "请求地址", "status": "passed", "attachments": [{"name": "请求地址", "source": "b4859ff2-70b9-41f5-981a-efc0367e0ffa-attachment.txt", "type": "text/plain"}], "start": 1610439074118, "stop": 1610439074118}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "29350730-d4c6-4ea5-90d1-604e89041707-attachment.txt", "type": "text/plain"}], "start": 1610439074118, "stop": 1610439074118}, {"name": "请求参数", "status": "passed", "attachments": [{"name": "请求参数", "source": "6e7789af-8728-4f77-955f-48ec77e7b3c2-attachment.txt", "type": "text/plain"}], "start": 1610439074118, "stop": 1610439074119}, {"name": "上传文件", "status": "passed", "attachments": [{"name": "上传文件", "source": "e0d487ff-163d-46da-9319-6d21cdb0d3c3-attachment.txt", "type": "text/plain"}], "start": 1610439074119, "stop": 1610439074119}, {"name": "响应耗时(s)", "status": "passed", "attachments": [{"name": "响应耗时(s)", "source": "ef4f61af-4551-4445-9204-c34dfb3e4b9c-attachment.txt", "type": "text/plain"}], "start": 1610439074323, "stop": 1610439074323}, {"name": "响应内容", "status": "passed", "attachments": [{"name": "响应内容", "source": "b9066d3b-776a-4d66-a832-d68dd7320832-attachment.txt", "type": "text/plain"}], "start": 1610439074323, "stop": 1610439074324}, {"name": "存储实际响应", "status": "passed", "attachments": [{"name": "存储实际响应", "source": "6fd8d163-6b34-4c99-9da8-ead59d650bac-attachment.txt", "type": "text/plain"}], "start": 1610439074324, "stop": 1610439074325}, {"name": "第1个断言", "status": "passed", "attachments": [{"name": "第1个断言", "source": "7c044060-e282-4759-83ed-37b55f7ab110-attachment.txt", "type": "text/plain"}], "start": 1610439074326, "stop": 1610439074326}], "parameters": [{"name": "cases", "value": "['case_027', '多媒体文件', '多媒体文件', '上传媒体文件-pdf', '/v1/media/upload?access_token=&$.case_001.access_token&', '', 'post', 'data', '{\\n \"media\": \"/Users/liuchengxu/study/工作软件的一些安装包/测试数据/测试文件/敏捷项目 - 测试流程规范.pdf\"\\n}', '{\"type\": \"file\"}', '', '{\"$.errmsg\":\"成功\"}']"}], "start": 1610439074118, "stop": 1610439074327, "uuid": "ae0146a6-ffa7-4adb-b7fc-d3626efc3d9c", "historyId": "ee88be9148a730617b573ca871d38066", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "feature", "value": "多媒体文件"}, {"name": "story", "value": "多媒体文件"}, {"name": "tag", "value": "flaky(reruns=0, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "liuchengxudeMacBook-Pro.local"}, {"name": "thread", "value": "14362-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}