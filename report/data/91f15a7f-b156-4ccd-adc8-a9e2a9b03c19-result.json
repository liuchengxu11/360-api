{"name": "禁用公众号3", "status": "failed", "statusDetails": {"message": "AssertionError: 断言失败 -|- 实际结果:非法 token || 预期结果: 成功", "trace": "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'err_code': '10000007', 'err_msg': '非法 token', 'time_cost': '', 'timestamp': '1611107789', ...}\nexpect_str = '{\"$.err_msg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools/data_process.py:118: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['test_033', '公众号模块', '禁用公众号', '禁用公众号3', '/corpmanage/app/extend/update', '', ...]\n\n    @pytest.mark.flaky(reruns=0, reruns_delay=1)\n    def test_main(cases):#cases, get_db\n        # 此处的cases入参来自与 conftest.py  文件中 cases函数，与直接使用 @pytest.mark.parametrize\n        # 有着差不多的效果\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 执行sql\n        # DataProcess.handle_sql(sql, get_db)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest/test_api.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'err_code': '10000007', 'err_msg': '非法 token', 'time_cost': '', 'timestamp': '1611107789', ...}\nexpect_str = '{\"$.err_msg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n>               raise AssertionError(f'断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 断言失败 -|- 实际结果:非法 token || 预期结果: 成功\n\ntools/data_process.py:120: AssertionError"}, "steps": [{"name": "请求地址", "status": "passed", "attachments": [{"name": "请求地址", "source": "30fedd12-d387-47d2-a23c-1cae56547930-attachment.txt", "type": "text/plain"}], "start": 1611107789306, "stop": 1611107789306}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "db34cd87-e447-428a-977c-99c214786f2e-attachment.txt", "type": "text/plain"}], "start": 1611107789306, "stop": 1611107789306}, {"name": "请求参数", "status": "passed", "attachments": [{"name": "请求参数", "source": "19639411-eeb7-461f-bc3f-556ccbe10655-attachment.txt", "type": "text/plain"}], "start": 1611107789307, "stop": 1611107789308}, {"name": "上传文件", "status": "passed", "attachments": [{"name": "上传文件", "source": "6914eec8-5467-4437-94e9-6f60faf9130b-attachment.txt", "type": "text/plain"}], "start": 1611107789308, "stop": 1611107789308}, {"name": "响应耗时(s)", "status": "passed", "attachments": [{"name": "响应耗时(s)", "source": "c41dab75-cd1e-4813-a1dd-67feb26532a1-attachment.txt", "type": "text/plain"}], "start": 1611107789384, "stop": 1611107789385}, {"name": "响应内容", "status": "passed", "attachments": [{"name": "响应内容", "source": "a6043f23-551b-48ec-890e-b12a65527077-attachment.txt", "type": "text/plain"}], "start": 1611107789385, "stop": 1611107789386}, {"name": "存储实际响应", "status": "passed", "attachments": [{"name": "存储实际响应", "source": "20607efa-1fc8-4e0a-bf14-209334bc5712-attachment.txt", "type": "text/plain"}], "start": 1611107789387, "stop": 1611107789388}, {"name": "第1个断言", "status": "passed", "attachments": [{"name": "第1个断言", "source": "86ac97ef-4333-4dae-b56d-41b18358b061-attachment.txt", "type": "text/plain"}], "start": 1611107789388, "stop": 1611107789390}], "parameters": [{"name": "cases", "value": "['test_033', '公众号模块', '禁用公众号', '禁用公众号3', '/corpmanage/app/extend/update', '', 'post', 'json', '', '{\\n    \"trans_id\":\"&$.test_002.trans_id&\",\\n    \"access_token\":\"&$.test_003..datas[0].access_token&\",\\n    \"cid\":\"&$.test_002..datas[0].cid&\",\\n    \"client_ver\":\"3.1.0\",\\n    \"dev_type\":\"7\",\\n    \"operator_uid\":\"&$.test_002..datas[0].admin_uid&\",\\n    \"app_id\": \"&$.test_022..datas[6].app_id&\",\\n    \"name\":\"应用3-部门有发布权限\",\\n    \"desc\":\"应用3-部门有发布权限\",\\n    \"visible_scopes\":{\\n\\n    },\\n    \"preadd_scopes\":{\\n\\n    },\\n    \"extend_type\":\"1\",\\n    \"extend_params\":{\\n        \"receive_scopes\":{\\n\\n        },\\n        \"publish_scopes\":{\\n            \"0\":{\\n                \"did\":\"0\",\\n                \"name\":\"pytest\"\\n            }\\n        },\\n        \"receive_type\":\"1\",\\n        \"push_message_status\":\"0\",\\n        \"new_windows_status\":\"0\"\\n    },\\n    \"status\": 0\\n}', '', '', '{\"$.err_msg\":\"成功\"}']"}], "start": 1611107789305, "stop": 1611107789390, "uuid": "edebcfe3-70ec-4502-9640-d304a69a4cff", "historyId": "5ba7dc56484d48cbaa44e0ed12933d71", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "feature", "value": "公众号模块"}, {"name": "story", "value": "禁用公众号"}, {"name": "tag", "value": "flaky(reruns=0, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "liuchengxudeMacBook-Pro.local"}, {"name": "thread", "value": "2004-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}