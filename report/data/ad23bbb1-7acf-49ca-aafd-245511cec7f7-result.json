{"name": "创建公众号-单个成员预添加-权限全部门", "status": "failed", "statusDetails": {"message": "AssertionError: 断言失败 -|- 实际结果:非法 token || 预期结果: 成功", "trace": "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'err_code': '10000007', 'err_msg': '非法 token', 'time_cost': '', 'timestamp': '1611107787', ...}\nexpect_str = '{\"$.err_msg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools/data_process.py:118: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['test_017', '公众号模块', '创建公众号', '创建公众号-单个成员预添加-权限全部门', '/corpmanage/app/extend/create', '', ...]\n\n    @pytest.mark.flaky(reruns=0, reruns_delay=1)\n    def test_main(cases):#cases, get_db\n        # 此处的cases入参来自与 conftest.py  文件中 cases函数，与直接使用 @pytest.mark.parametrize\n        # 有着差不多的效果\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 执行sql\n        # DataProcess.handle_sql(sql, get_db)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest/test_api.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'err_code': '10000007', 'err_msg': '非法 token', 'time_cost': '', 'timestamp': '1611107787', ...}\nexpect_str = '{\"$.err_msg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n>               raise AssertionError(f'断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 断言失败 -|- 实际结果:非法 token || 预期结果: 成功\n\ntools/data_process.py:120: AssertionError"}, "steps": [{"name": "请求地址", "status": "passed", "attachments": [{"name": "请求地址", "source": "9e25f0af-bc1e-42e5-a7f4-566feb296ff4-attachment.txt", "type": "text/plain"}], "start": 1611107787531, "stop": 1611107787531}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "d4908a78-81e1-498d-9f17-ed7d0eb38ef8-attachment.txt", "type": "text/plain"}], "start": 1611107787532, "stop": 1611107787532}, {"name": "请求参数", "status": "passed", "attachments": [{"name": "请求参数", "source": "2fd800f3-fd2a-4ad4-b3fc-12aaeafcc870-attachment.txt", "type": "text/plain"}], "start": 1611107787533, "stop": 1611107787534}, {"name": "上传文件", "status": "passed", "attachments": [{"name": "上传文件", "source": "c2d07b6d-2af7-43a3-aa38-6f99f732ed07-attachment.txt", "type": "text/plain"}], "start": 1611107787534, "stop": 1611107787534}, {"name": "响应耗时(s)", "status": "passed", "attachments": [{"name": "响应耗时(s)", "source": "5c068ac1-2f6b-4acb-a397-4b55e713212a-attachment.txt", "type": "text/plain"}], "start": 1611107787606, "stop": 1611107787607}, {"name": "响应内容", "status": "passed", "attachments": [{"name": "响应内容", "source": "8eaf5c4e-f293-412a-9f75-a83201d55e19-attachment.txt", "type": "text/plain"}], "start": 1611107787607, "stop": 1611107787608}, {"name": "存储实际响应", "status": "passed", "attachments": [{"name": "存储实际响应", "source": "9c306921-1444-4617-b9ff-397cd198b499-attachment.txt", "type": "text/plain"}], "start": 1611107787609, "stop": 1611107787612}, {"name": "第1个断言", "status": "passed", "attachments": [{"name": "第1个断言", "source": "cb940d5a-2a33-4e0c-b2a1-2d73eb9eb2a5-attachment.txt", "type": "text/plain"}], "start": 1611107787613, "stop": 1611107787613}], "parameters": [{"name": "cases", "value": "['test_017', '公众号模块', '创建公众号', '创建公众号-单个成员预添加-权限全部门', '/corpmanage/app/extend/create', '', 'post', 'json', '', '{\\n    \"trans_id\": \"&$.test_002.trans_id&\",\\n    \"access_token\": \"&$.test_003..datas[0].access_token&\",\\n    \"cid\": \"&$.test_002..datas[0].cid&\",\\n    \"client_ver\": \"3.1.0\",\\n    \"dev_type\": \"7\",\\n    \"operator_uid\": \"&$.test_002..datas[0].admin_uid&\",\\n    \"name\": \"应用4-预添加py5\",\\n    \"desc\": \"权限全部门\",\\n    \"visible_scopes\": {\\n                \"0\": {\\n                    \"uid\": \"&$.test_010..datas[0].uid&\",\\n                    \"name\": \"pytest_test5\"\\n                }\\n    },\\n    \"preadd_scopes\": {\\n        \"0\": {\\n            \"uid\": \"&$.test_010..datas[0].uid&\",\\n            \"name\": \"pytest_test5\"\\n        }\\n    },\\n    \"extend_type\": \"1\",\\n    \"extend_params\": {\\n        \"receive_scopes\": {},\\n        \"publish_scopes\": {\\n            \"0\": {\\n                \"did\": \"0\",\\n                \"name\": \"pytest\"\\n            }\\n        },\\n        \"receive_type\": \"1\",\\n        \"push_message_status\": \"0\",\\n        \"new_windows_status\": \"0\"\\n    }\\n}', '', '', '{\"$.err_msg\":\"成功\"}']"}], "start": 1611107787531, "stop": 1611107787613, "uuid": "c3f3e043-353b-4fb5-9b43-51fcb2311968", "historyId": "371500b22dde43facb97f8752bf0ff77", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "feature", "value": "公众号模块"}, {"name": "story", "value": "创建公众号"}, {"name": "tag", "value": "flaky(reruns=0, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "liuchengxudeMacBook-Pro.local"}, {"name": "thread", "value": "2004-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}