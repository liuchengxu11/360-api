{"name": "将消息频道2与应用7的app结合", "status": "failed", "statusDetails": {"message": "AssertionError: 断言失败 -|- 实际结果:参数错误 || 预期结果: 成功", "trace": "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '100002', 'errmsg': '参数错误'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools/data_process.py:118: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['case_138', '消息频道管理', '应用消息频道设置', '将消息频道2与应用7的app结合', '/v1/app/channel/set?access_token=&$.case_100.access_token&', '', ...]\n\n    @pytest.mark.flaky(reruns=0, reruns_delay=1)\n    def test_main(cases):#cases, get_db\n        # 此处的cases入参来自与 conftest.py  文件中 cases函数，与直接使用 @pytest.mark.parametrize\n        # 有着差不多的效果\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 执行sql\n        # DataProcess.handle_sql(sql, get_db)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest/test_api.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '100002', 'errmsg': '参数错误'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n>               raise AssertionError(f'断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 断言失败 -|- 实际结果:参数错误 || 预期结果: 成功\n\ntools/data_process.py:120: AssertionError"}, "steps": [{"name": "请求地址", "status": "passed", "attachments": [{"name": "请求地址", "source": "d3890d15-6371-44ef-99b5-a0e2c6de6609-attachment.txt", "type": "text/plain"}], "start": 1616132027535, "stop": 1616132027536}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "f15a9205-3ddd-4a26-bccc-0c459465cebe-attachment.txt", "type": "text/plain"}], "start": 1616132027536, "stop": 1616132027536}, {"name": "请求参数", "status": "passed", "attachments": [{"name": "请求参数", "source": "b99d04ca-74e1-4b3d-960d-af356a57bf50-attachment.txt", "type": "text/plain"}], "start": 1616132027540, "stop": 1616132027540}, {"name": "上传文件", "status": "passed", "attachments": [{"name": "上传文件", "source": "e0976c90-ecf9-440f-aa57-e82fc940a40e-attachment.txt", "type": "text/plain"}], "start": 1616132027541, "stop": 1616132027541}, {"name": "响应耗时(s)", "status": "passed", "attachments": [{"name": "响应耗时(s)", "source": "3ceecc37-cb8d-4761-8142-d98b63c47e93-attachment.txt", "type": "text/plain"}], "start": 1616132027629, "stop": 1616132027630}, {"name": "响应内容", "status": "passed", "attachments": [{"name": "响应内容", "source": "985410c0-b73e-4ca8-9617-2494d9a169f3-attachment.txt", "type": "text/plain"}], "start": 1616132027630, "stop": 1616132027630}, {"name": "存储实际响应", "status": "passed", "attachments": [{"name": "存储实际响应", "source": "364a1896-3a91-4911-a2ca-38d091939fff-attachment.txt", "type": "text/plain"}], "start": 1616132027631, "stop": 1616132027637}, {"name": "第1个断言", "status": "passed", "attachments": [{"name": "第1个断言", "source": "a49c163a-ff12-4115-a2e0-017481de6674-attachment.txt", "type": "text/plain"}], "start": 1616132027637, "stop": 1616132027637}], "parameters": [{"name": "cases", "value": "['case_138', '消息频道管理', '应用消息频道设置', '将消息频道2与应用7的app结合', '/v1/app/channel/set?access_token=&$.case_100.access_token&', '', 'post', 'json', '', '{ \"appid\": \"&$.test_023..datas[10].app_id&\", \"channelid\": \"&$.case_135.channelid&\" }', '', '', '{\"$.errmsg\":\"成功\"}']"}], "start": 1616132027535, "stop": 1616132027637, "uuid": "1282928a-89c7-4176-84e1-527e50c9ae8c", "historyId": "4cefc3eb9f2e47818ec774cc881e02cb", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "tag", "value": "flaky(reruns=0, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "liuchengxudeMacBook-Pro.local"}, {"name": "thread", "value": "2415-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}