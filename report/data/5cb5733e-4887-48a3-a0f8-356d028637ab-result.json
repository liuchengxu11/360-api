{"name": "删除公众号3", "status": "failed", "statusDetails": {"message": "AssertionError: 断言失败 -|- 实际结果:非法 token || 预期结果: 成功", "trace": "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'err_code': '10000007', 'err_msg': '非法 token', 'time_cost': '', 'timestamp': '1611107789', ...}\nexpect_str = '{\"$.err_msg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools/data_process.py:118: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['test_034', '公众号模块', '删除公众号', '删除公众号3', '/corpmanage/app/delete', '', ...]\n\n    @pytest.mark.flaky(reruns=0, reruns_delay=1)\n    def test_main(cases):#cases, get_db\n        # 此处的cases入参来自与 conftest.py  文件中 cases函数，与直接使用 @pytest.mark.parametrize\n        # 有着差不多的效果\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 执行sql\n        # DataProcess.handle_sql(sql, get_db)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest/test_api.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'err_code': '10000007', 'err_msg': '非法 token', 'time_cost': '', 'timestamp': '1611107789', ...}\nexpect_str = '{\"$.err_msg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n>               raise AssertionError(f'断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 断言失败 -|- 实际结果:非法 token || 预期结果: 成功\n\ntools/data_process.py:120: AssertionError"}, "steps": [{"name": "请求地址", "status": "passed", "attachments": [{"name": "请求地址", "source": "6ffb35c7-8b76-4828-9386-98163314b1a3-attachment.txt", "type": "text/plain"}], "start": 1611107789418, "stop": 1611107789419}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "51c97127-f078-43fa-bb97-1fa5e07702c9-attachment.txt", "type": "text/plain"}], "start": 1611107789419, "stop": 1611107789420}, {"name": "请求参数", "status": "passed", "attachments": [{"name": "请求参数", "source": "a6e5f88b-ea87-4c9d-a764-a9868f725118-attachment.txt", "type": "text/plain"}], "start": 1611107789423, "stop": 1611107789426}, {"name": "上传文件", "status": "passed", "attachments": [{"name": "上传文件", "source": "123a4a83-90f4-4053-ac77-7030f405d447-attachment.txt", "type": "text/plain"}], "start": 1611107789426, "stop": 1611107789427}, {"name": "响应耗时(s)", "status": "passed", "attachments": [{"name": "响应耗时(s)", "source": "891ca045-55b7-4175-85bb-bb67338f150b-attachment.txt", "type": "text/plain"}], "start": 1611107789504, "stop": 1611107789505}, {"name": "响应内容", "status": "passed", "attachments": [{"name": "响应内容", "source": "7e40104b-d1a6-4a9c-abf6-cf7d271cfeb0-attachment.txt", "type": "text/plain"}], "start": 1611107789505, "stop": 1611107789505}, {"name": "存储实际响应", "status": "passed", "attachments": [{"name": "存储实际响应", "source": "b2f82d16-6f0f-4f3b-a9d7-314cb5a71576-attachment.txt", "type": "text/plain"}], "start": 1611107789505, "stop": 1611107789506}, {"name": "第1个断言", "status": "passed", "attachments": [{"name": "第1个断言", "source": "4520f616-ac5f-4450-a75d-881a09ce9078-attachment.txt", "type": "text/plain"}], "start": 1611107789507, "stop": 1611107789507}], "parameters": [{"name": "cases", "value": "['test_034', '公众号模块', '删除公众号', '删除公众号3', '/corpmanage/app/delete', '', 'post', 'json', '', '{\\n    \"trans_id\": \"&$.test_002.trans_id&\",\\n    \"access_token\": \"&$.test_003..datas[0].access_token&\",\\n    \"cid\": \"&$.test_002..datas[0].cid&\",\\n    \"client_ver\":\"3.1.0\",\\n    \"dev_type\":\"7\",\\n    \"operator_uid\": \"&$.test_002..datas[0].admin_uid&\",\\n    \"id\":\"&$.test_022..datas[6].app_id&\"\\n}', '', '', '{\"$.err_msg\":\"成功\"}']"}], "start": 1611107789418, "stop": 1611107789507, "uuid": "e8c1f841-e205-457c-b1b7-8f53ac9888b6", "historyId": "7ee4d3e5ec314b8dd1332a710d3e0cd9", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "feature", "value": "公众号模块"}, {"name": "story", "value": "删除公众号"}, {"name": "tag", "value": "flaky(reruns=0, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "liuchengxudeMacBook-Pro.local"}, {"name": "thread", "value": "2004-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}