{"name": "公众号中的预添加设置", "status": "failed", "statusDetails": {"message": "AssertionError: 断言失败 -|- 实际结果:非法 token || 预期结果: 成功", "trace": "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'err_code': '10000007', 'err_msg': '非法 token', 'time_cost': '', 'timestamp': '1611107787', ...}\nexpect_str = '{\"$.err_msg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools/data_process.py:118: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['test_013', '公众号模块', '创建公众号', '公众号中的预添加设置', '/corpmanage/getdeptinfo', '', ...]\n\n    @pytest.mark.flaky(reruns=0, reruns_delay=1)\n    def test_main(cases):#cases, get_db\n        # 此处的cases入参来自与 conftest.py  文件中 cases函数，与直接使用 @pytest.mark.parametrize\n        # 有着差不多的效果\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 执行sql\n        # DataProcess.handle_sql(sql, get_db)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest/test_api.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'err_code': '10000007', 'err_msg': '非法 token', 'time_cost': '', 'timestamp': '1611107787', ...}\nexpect_str = '{\"$.err_msg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n>               raise AssertionError(f'断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 断言失败 -|- 实际结果:非法 token || 预期结果: 成功\n\ntools/data_process.py:120: AssertionError"}, "steps": [{"name": "请求地址", "status": "passed", "attachments": [{"name": "请求地址", "source": "2b5a1386-0671-43bb-8ebf-8d8da55410c2-attachment.txt", "type": "text/plain"}], "start": 1611107787096, "stop": 1611107787097}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "0cd371f6-a07e-4ff8-ae75-f746c4c1404b-attachment.txt", "type": "text/plain"}], "start": 1611107787097, "stop": 1611107787097}, {"name": "请求参数", "status": "passed", "attachments": [{"name": "请求参数", "source": "00a7af2d-5a44-4d41-9d59-b767574ea2c9-attachment.txt", "type": "text/plain"}], "start": 1611107787098, "stop": 1611107787098}, {"name": "上传文件", "status": "passed", "attachments": [{"name": "上传文件", "source": "6ab4c014-cea6-4bee-ac12-29644760bbfb-attachment.txt", "type": "text/plain"}], "start": 1611107787098, "stop": 1611107787098}, {"name": "响应耗时(s)", "status": "passed", "attachments": [{"name": "响应耗时(s)", "source": "dd2e141d-e0ae-4912-b8c7-973d11965b6a-attachment.txt", "type": "text/plain"}], "start": 1611107787174, "stop": 1611107787174}, {"name": "响应内容", "status": "passed", "attachments": [{"name": "响应内容", "source": "ce1fea82-33b7-4bf7-ad40-9a54ea49cbcc-attachment.txt", "type": "text/plain"}], "start": 1611107787174, "stop": 1611107787175}, {"name": "存储实际响应", "status": "passed", "attachments": [{"name": "存储实际响应", "source": "fe8c0bc9-c5a2-47f9-8f3f-6303174bc378-attachment.txt", "type": "text/plain"}], "start": 1611107787175, "stop": 1611107787176}, {"name": "第1个断言", "status": "passed", "attachments": [{"name": "第1个断言", "source": "94aba23b-ee01-4a24-a48d-29258a7cdd04-attachment.txt", "type": "text/plain"}], "start": 1611107787177, "stop": 1611107787177}], "parameters": [{"name": "cases", "value": "['test_013', '公众号模块', '创建公众号', '公众号中的预添加设置', '/corpmanage/getdeptinfo', '', 'post', 'json', '', '{\\n    \"trans_id\":\"&$.test_002.trans_id&\",\\n    \"access_token\":\"&$.test_003..datas[0].access_token&\",\\n    \"cid\":\"&$.test_002..datas[0].cid&\",\\n    \"client_ver\":\"3.1.0\",\\n    \"dev_type\":\"7\",\\n    \"operator_uid\":\"&$.test_002..datas[0].admin_uid&\",\\n    \"did\":\"0\"\\n}', '', '{\\n    \"trans_id\": \"C00665146AC1C8EED5B0175980B7A905\",\\n    \"err_code\": \"0\",\\n    \"err_msg\": \"成功\",\\n    \"timestamp\": \"1610538364\",\\n    \"time_cost\": \"0.53\"\\n}', '{\"$.err_msg\":\"成功\"}']"}], "start": 1611107787096, "stop": 1611107787177, "uuid": "04e8dc8b-7e4f-4a6e-b975-edd7c2279304", "historyId": "5dcd673c9103656bd9a03aaad715fda7", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "feature", "value": "公众号模块"}, {"name": "story", "value": "创建公众号"}, {"name": "tag", "value": "flaky(reruns=0, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "liuchengxudeMacBook-Pro.local"}, {"name": "thread", "value": "2004-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}