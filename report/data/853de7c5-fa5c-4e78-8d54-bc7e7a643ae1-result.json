{"name": "上传媒体文件-word", "status": "failed", "statusDetails": {"message": "AssertionError: 断言失败 -|- 实际结果:文件大小超出限制 || 预期结果: 成功", "trace": "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '400002', 'errmsg': '文件大小超出限制'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools/data_process.py:118: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['case_026', '多媒体文件', '多媒体文件', '上传媒体文件-word', '/v1/media/upload?access_token=&$.case_001.access_token&', '', ...]\n\n    @pytest.mark.flaky(reruns=0, reruns_delay=1)\n    def test_main(cases):#cases, get_db\n        # 此处的cases入参来自与 conftest.py  文件中 cases函数，与直接使用 @pytest.mark.parametrize\n        # 有着差不多的效果\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 执行sql\n        # DataProcess.handle_sql(sql, get_db)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest/test_api.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '400002', 'errmsg': '文件大小超出限制'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n>               raise AssertionError(f'断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 断言失败 -|- 实际结果:文件大小超出限制 || 预期结果: 成功\n\ntools/data_process.py:120: AssertionError"}, "steps": [{"name": "请求地址", "status": "passed", "attachments": [{"name": "请求地址", "source": "7ae7b231-2b92-4234-8eb9-a72f06acd508-attachment.txt", "type": "text/plain"}], "start": 1610439073842, "stop": 1610439073842}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "17aa8bcb-707e-4f33-8511-83c176a7b149-attachment.txt", "type": "text/plain"}], "start": 1610439073842, "stop": 1610439073842}, {"name": "请求参数", "status": "passed", "attachments": [{"name": "请求参数", "source": "bc3072e9-beb2-4493-a43b-70deb4b1b33c-attachment.txt", "type": "text/plain"}], "start": 1610439073842, "stop": 1610439073843}, {"name": "上传文件", "status": "passed", "attachments": [{"name": "上传文件", "source": "08f005ec-4e3f-44b4-a29b-0a067db2933a-attachment.txt", "type": "text/plain"}], "start": 1610439073843, "stop": 1610439073843}, {"name": "响应耗时(s)", "status": "passed", "attachments": [{"name": "响应耗时(s)", "source": "e9a9654a-0a78-4cbc-a2dd-c64f809ef41b-attachment.txt", "type": "text/plain"}], "start": 1610439074097, "stop": 1610439074097}, {"name": "响应内容", "status": "passed", "attachments": [{"name": "响应内容", "source": "e7f82dd7-e8f5-4ca1-b62a-b672a7f76eba-attachment.txt", "type": "text/plain"}], "start": 1610439074097, "stop": 1610439074098}, {"name": "存储实际响应", "status": "passed", "attachments": [{"name": "存储实际响应", "source": "e3f8a8a7-7561-439c-a8f9-95f833cc9b54-attachment.txt", "type": "text/plain"}], "start": 1610439074098, "stop": 1610439074099}, {"name": "第1个断言", "status": "passed", "attachments": [{"name": "第1个断言", "source": "d45f836a-b250-4d65-99b3-6a950a2bfb50-attachment.txt", "type": "text/plain"}], "start": 1610439074100, "stop": 1610439074100}], "parameters": [{"name": "cases", "value": "['case_026', '多媒体文件', '多媒体文件', '上传媒体文件-word', '/v1/media/upload?access_token=&$.case_001.access_token&', '', 'post', 'data', '{\\n \"media\": \"/Users/liuchengxu/study/工作软件的一些安装包/测试数据/测试文件/敏捷项目 - 测试流程规范.docx\"\\n}', '{\"type\": \"file\"}', '', '{\"$.errmsg\":\"成功\"}']"}], "start": 1610439073842, "stop": 1610439074100, "uuid": "adb02751-c465-446f-843a-76ca8886939e", "historyId": "87c14f5e2e8fc7cd2273593b4246d3c3", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "feature", "value": "多媒体文件"}, {"name": "story", "value": "多媒体文件"}, {"name": "tag", "value": "flaky(reruns=0, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "liuchengxudeMacBook-Pro.local"}, {"name": "thread", "value": "14362-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}