{"name": "获取成员消息未读数", "status": "failed", "statusDetails": {"message": "AssertionError: 断言失败 -|- 实际结果:参数错误 || 预期结果: 成功", "trace": "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '100002', 'errmsg': '参数错误'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools/data_process.py:118: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['case_043', '通讯录管理', '成员管理', '获取成员消息未读数', '/v1/user/unreadmsg/count?access_token=&$.case_001.access_token&', '', ...]\n\n    @pytest.mark.flaky(reruns=0, reruns_delay=1)\n    def test_main(cases):#cases, get_db\n        # 此处的cases入参来自与 conftest.py  文件中 cases函数，与直接使用 @pytest.mark.parametrize\n        # 有着差不多的效果\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 执行sql\n        # DataProcess.handle_sql(sql, get_db)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest/test_api.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'errcode': '100002', 'errmsg': '参数错误'}\nexpect_str = '{\"$.errmsg\":\"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n>               raise AssertionError(f'断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 断言失败 -|- 实际结果:参数错误 || 预期结果: 成功\n\ntools/data_process.py:120: AssertionError"}, "steps": [{"name": "请求地址", "status": "passed", "attachments": [{"name": "请求地址", "source": "f658cc69-3ca6-4a38-a13b-6168af2b923a-attachment.txt", "type": "text/plain"}], "start": 1616131967342, "stop": 1616131967343}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "8d1a16e5-90ca-44c3-af01-84c10af3074b-attachment.txt", "type": "text/plain"}], "start": 1616131967343, "stop": 1616131967343}, {"name": "请求参数", "status": "passed", "attachments": [{"name": "请求参数", "source": "40186e6c-8e68-4fed-add9-265f9abaac69-attachment.txt", "type": "text/plain"}], "start": 1616131967343, "stop": 1616131967344}, {"name": "上传文件", "status": "passed", "attachments": [{"name": "上传文件", "source": "00c55d68-c745-4bb3-bc10-5903b1ff8797-attachment.txt", "type": "text/plain"}], "start": 1616131967344, "stop": 1616131967344}, {"name": "响应耗时(s)", "status": "passed", "attachments": [{"name": "响应耗时(s)", "source": "3bdf29c2-8262-449b-a75c-ab6fe9370f58-attachment.txt", "type": "text/plain"}], "start": 1616131967592, "stop": 1616131967592}, {"name": "响应内容", "status": "passed", "attachments": [{"name": "响应内容", "source": "79603f01-a2e2-4f78-bb9f-821d9d6af210-attachment.txt", "type": "text/plain"}], "start": 1616131967593, "stop": 1616131967593}, {"name": "存储实际响应", "status": "passed", "attachments": [{"name": "存储实际响应", "source": "bbd1edf4-61a3-4500-a58c-bca821a59e63-attachment.txt", "type": "text/plain"}], "start": 1616131967593, "stop": 1616131967594}, {"name": "第1个断言", "status": "passed", "attachments": [{"name": "第1个断言", "source": "307b4ea8-c6d8-4bf0-a182-533f1a818e15-attachment.txt", "type": "text/plain"}], "start": 1616131967595, "stop": 1616131967595}], "parameters": [{"name": "cases", "value": "['case_043', '通讯录管理', '成员管理', '获取成员消息未读数', '/v1/user/unreadmsg/count?access_token=&$.case_001.access_token&', '', 'get', 'params', '', '{\\n \"account\": \"piliangchuangjianyonghu1\"\\n}', '', '', '{\"$.errmsg\":\"成功\"}']"}], "start": 1616131967342, "stop": 1616131967595, "uuid": "b5e4c1ae-7841-4d16-88b7-c5ed9c38f4e9", "historyId": "97179921739f490790b38e4bb04acae0", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "tag", "value": "flaky(reruns=0, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "liuchengxudeMacBook-Pro.local"}, {"name": "thread", "value": "2415-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}