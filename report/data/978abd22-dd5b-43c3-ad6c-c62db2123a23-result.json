{"name": "创建组织", "status": "broken", "statusDetails": {"message": "  File \"<string>\", line 0\n    \n    ^\nSyntaxError: unexpected EOF while parsing", "trace": "dict_str = ''\n\n    def convert_json(dict_str: str) -> dict:\n        \"\"\"\n        :param dict_str: 长得像字典的字符串\n        return json格式的内容\n        \"\"\"\n        try:\n            if 'None' in dict_str:\n                dict_str = dict_str.replace('None', 'null')\n            elif 'True' in dict_str:\n                dict_str = dict_str.replace('True', 'true')\n            elif 'False' in dict_str:\n                dict_str = dict_str.replace('False', 'false')\n>           dict_str = json.loads(dict_str)\n\ntools/__init__.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = '', encoding = None, cls = None, object_hook = None, parse_float = None\nparse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, encoding=None, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/__init__.py:348: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fc548372890>, s = ''\n_w = <built-in method match of re.Pattern object at 0x7fc4c8052930>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fc548372890>, s = '', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['test_002', '通讯录管理', '组织管理', '创建组织', '/corpmanage/createcorp', '', ...]\n\n    @pytest.mark.flaky(reruns=0, reruns_delay=1)\n    def test_main(cases):#cases, get_db\n        # 此处的cases入参来自与 conftest.py  文件中 cases函数，与直接使用 @pytest.mark.parametrize\n        # 有着差不多的效果\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 执行sql\n        # DataProcess.handle_sql(sql, get_db)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest/test_api.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntools/data_process.py:109: in assert_result\n    expect_dict = convert_json(expect_str)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndict_str = ''\n\n    def convert_json(dict_str: str) -> dict:\n        \"\"\"\n        :param dict_str: 长得像字典的字符串\n        return json格式的内容\n        \"\"\"\n        try:\n            if 'None' in dict_str:\n                dict_str = dict_str.replace('None', 'null')\n            elif 'True' in dict_str:\n                dict_str = dict_str.replace('True', 'true')\n            elif 'False' in dict_str:\n                dict_str = dict_str.replace('False', 'false')\n            dict_str = json.loads(dict_str)\n        except Exception as e:\n            if 'null' in dict_str:\n                dict_str = dict_str.replace('null', 'None')\n            elif 'true' in dict_str:\n                dict_str = dict_str.replace('true', 'True')\n            elif 'False' in dict_str:\n                dict_str = dict_str.replace('false', 'False')\n>           dict_str = eval(dict_str)\nE             File \"<string>\", line 0\nE               \nE               ^\nE           SyntaxError: unexpected EOF while parsing\n\ntools/__init__.py:66: SyntaxError"}, "steps": [{"name": "请求地址", "status": "passed", "attachments": [{"name": "请求地址", "source": "ea8c5526-40be-4bf9-ab9e-b9a5b6593678-attachment.txt", "type": "text/plain"}], "start": 1610439085004, "stop": 1610439085004}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "cd403c93-1715-40fc-8de5-c3aacb4efaed-attachment.txt", "type": "text/plain"}], "start": 1610439085005, "stop": 1610439085005}, {"name": "请求参数", "status": "passed", "attachments": [{"name": "请求参数", "source": "7b111815-eb13-458b-9fed-ab92c679c11d-attachment.txt", "type": "text/plain"}], "start": 1610439085006, "stop": 1610439085006}, {"name": "上传文件", "status": "passed", "attachments": [{"name": "上传文件", "source": "7863e9de-1d73-445a-950b-22bb8b6588e7-attachment.txt", "type": "text/plain"}], "start": 1610439085006, "stop": 1610439085006}, {"name": "响应耗时(s)", "status": "passed", "attachments": [{"name": "响应耗时(s)", "source": "fbeb6151-d749-4e1d-88e4-a3f118b08719-attachment.txt", "type": "text/plain"}], "start": 1610439085099, "stop": 1610439085100}, {"name": "响应内容", "status": "passed", "attachments": [{"name": "响应内容", "source": "a6560ef3-8db0-4c2b-ac16-e3bcfc84bce9-attachment.txt", "type": "text/plain"}], "start": 1610439085100, "stop": 1610439085101}, {"name": "存储实际响应", "status": "passed", "attachments": [{"name": "存储实际响应", "source": "6fb17912-8768-484c-bb21-f9b2c00ef0fe-attachment.txt", "type": "text/plain"}], "start": 1610439085101, "stop": 1610439085103}], "parameters": [{"name": "cases", "value": "['test_002', '通讯录管理', '组织管理', '创建组织', '/corpmanage/createcorp', '', 'post', 'json', '', '{\\n \"trans_id\": \"&$.case_088.trans_id&\",\\n \"master_token\": \"&$.case_088..datas[0].master_token&\",\\n \"cn_name\": \"pytest\",\\n \"admin_name\": \"admin\",\\n \"max_user_num\": \"100\"\\n}', '', '']"}], "start": 1610439085004, "stop": 1610439085103, "uuid": "8f641fe6-6f5e-46de-8fc2-f4ba2651503b", "historyId": "652aab4b830e31052e91be4fd150459f", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "feature", "value": "通讯录管理"}, {"name": "story", "value": "组织管理"}, {"name": "tag", "value": "flaky(reruns=0, reruns_delay=1)"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "liuchengxudeMacBook-Pro.local"}, {"name": "thread", "value": "14362-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}